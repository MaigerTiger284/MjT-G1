import serial
import subprocess
import time
import threading

# ???????????? Serial ???????????
ARDUINO_PORT = "/dev/ttyUSB1"
BAUD_RATE = 9600

# ??????????????????????????? Arduino
last_sent_data = None
ser = None  # ?????????????????????? Serial

# ?????????????????????????? Arduino
def connect_serial():
    global ser
    while True:
        try:
            ser = serial.Serial(ARDUINO_PORT, BAUD_RATE, timeout=1)
            print("Connected to Arduino!")

            # ?????????????????????????????????? (?????)
            global last_sent_data
            if last_sent_data:
                print(f"Resending last value: {last_sent_data.decode().strip()} to Arduino")
                ser.write(last_sent_data)
                ser.flush()

            return
        except serial.SerialException:
            print("Arduino not found. Retrying in 5 seconds...")
            time.sleep(5)

# ?????????????????????? Arduino ??????????????????????
def send_to_arduino(data):
    global last_sent_data, ser
    last_sent_data = data  # ?????????????????????

    while True:
        try:
            if ser and ser.is_open:
                ser.write(data)
                ser.flush()  # ???? buffer ????????????????????????????
                return
        except serial.SerialException:
            print("Lost connection to Arduino. Reconnecting...")
            ser.close()
            time.sleep(5)
            connect_serial()  # ????????????????

# ??????????????????????? 3 ??????
def resend_last_value():
    while True:
        time.sleep(3)
        if last_sent_data and ser and ser.is_open:
            print(f"Resending every 3 sec: {last_sent_data.decode().strip()} to Arduino")
            send_to_arduino(last_sent_data)

# ?????? journalctl -f ??????????? log ??? real-time
cmd = ["journalctl", "-f", "-o", "cat"]

def monitor_journal():
    connect_serial()  # ???????????? Arduino ????????? monitoring
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    try:
        for line in iter(process.stdout.readline, ''):
            line = line.strip()
            if "Closing Screensaver" in line:
                print("Detected: Closing Screensaver -> Sending 'A' to Arduino")
                send_to_arduino(b"A\n")
            elif "Showing Screensaver" in line:
                print("Detected: Showing Screensaver -> Sending 'B' to Arduino")
                send_to_arduino(b"B\n")
    
    except KeyboardInterrupt:
        print("\nStopping log monitoring.")
        process.terminate()
        ser.close()

if __name__ == "__main__":
    # ????? Thread ????????????????????? 3 ??????
    threading.Thread(target=resend_last_value, daemon=True).start()
    monitor_journal()
